[{"C:\\Users\\tornike\\Desktop\\react-homework-8\\src\\index.js":"1","C:\\Users\\tornike\\Desktop\\react-homework-8\\src\\App.js":"2","C:\\Users\\tornike\\Desktop\\react-homework-8\\src\\reportWebVitals.js":"3","C:\\Users\\tornike\\Desktop\\react-homework-8\\src\\useForm.js":"4"},{"size":535,"mtime":1661690736254,"results":"5","hashOfConfig":"6"},{"size":1591,"mtime":1661801580838,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1661690736321,"results":"8","hashOfConfig":"6"},{"size":3252,"mtime":1661801568241,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1taedhr",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\tornike\\Desktop\\react-homework-8\\src\\index.js",[],[],"C:\\Users\\tornike\\Desktop\\react-homework-8\\src\\App.js",[],[],"C:\\Users\\tornike\\Desktop\\react-homework-8\\src\\reportWebVitals.js",[],[],"C:\\Users\\tornike\\Desktop\\react-homework-8\\src\\useForm.js",["23"],[],"import { useEffect, useState } from 'react';\r\n\r\nconst useForm = () => {\r\n    const initialValues = {firstName:\"\", lastName:\"\", age:\"\"};\r\n    const [formValue, setFormValue] = useState(initialValues);\r\n    const [formErors,setFormErors] = useState({});\r\n    const [formValid, isFormValid] = useState(false);\r\n    const [saveUser,setSaveUsers] = useState([])\r\n  \r\n    const onInputChange = (e) => {\r\n      const {name,value} = e.target;\r\n      setFormValue({...formValue,[name]:value})\r\n    }\r\n  \r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n        const randomId = new Date().valueOf()\r\n        setSaveUsers(prevUsers => {\r\n          return [...prevUsers, {...formValue, id:randomId}]\r\n        })\r\n\r\n      setFormValue(initialValues)\r\n    }\r\n  \r\n    useEffect(() => {\r\n      const timer = setTimeout(() => {\r\n        setFormValue(formValue)\r\n      }, 5000);\r\n      return () => clearTimeout(timer);\r\n    }, [formValue]);\r\n  \r\n    const validations = (value) => {\r\n      const errors = {};\r\n      if(value.firstName && value.firstName.length < 4) errors.firstName = \"სახელი უნდა შეიცავდეს მინუმუ 4 ასოს\";\r\n      if(value.lastName && value.lastName.length < 4) errors.lastName = \"გვარი უნდა შეიცავდეს მინიმუ 4 ასოს\";\r\n      if(value.age && value.age <= 18) errors.age = \"ასაკი უნდა აღემატებოდეს 18 წელს \";\r\n      return errors;\r\n    }\r\n  \r\n    useEffect(()=>{\r\n      setFormErors(validations(formValue))\r\n    },[formValue])\r\n  \r\n    useEffect(() => {\r\n      const ValidResults = validations(formValue)\r\n      setFormErors(ValidResults)\r\n      if(\r\n        formValue.firstName && \r\n        !ValidResults.firstName && \r\n        formValue.lastName && \r\n        !ValidResults.lastName &&\r\n        formValue.age && \r\n        !ValidResults.age\r\n        ){\r\n          isFormValid(true)\r\n        }else{\r\n          isFormValid(false)\r\n        }\r\n    },[formValue])\r\n  \r\n    return (\r\n      {formValue,formErors,formValid,saveUser,handleSubmit,onInputChange}\r\n    );\r\n}\r\n\r\nexport default useForm\r\n\r\n  {/* <div className=\"formValues\">\r\n  \r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <label>Name</label> \r\n            <input type={\"text\"} name=\"firstName\" placeholder='Enter your Name' value={formValue.firstName} onChange={onInputChange} />\r\n            {formErors.firstName && <p className='errorColor' >{formErors.firstName}</p>}\r\n          </div>\r\n  \r\n          <div>\r\n            <label>lastname</label>\r\n            <input type=\"text\" name=\"lastName\" placeholder='Eneter your Lastname' value={formValue.lastName} onChange={onInputChange} />\r\n            {formErors.lastName && <p className='errorColor'>{formErors.lastName}</p>}\r\n          </div>\r\n  \r\n          <div>\r\n            <label>age</label>\r\n            <input type={\"number\"} name={\"age\"} placeholder={\"Enter your Age\"} value={formValue.age} onChange={onInputChange}  />\r\n            {formErors.age && <p className='errorColor' >{formErors.age}</p>}\r\n          </div>\r\n          <button onClick={() => setSubmit(true)} disabled={!formValid}>subbmit</button>\r\n        </form>\r\n      </div> */}",{"ruleId":"24","severity":1,"message":"25","line":68,"column":3,"nodeType":"26","messageId":"27","endLine":90,"endColumn":17},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock"]